language: c++

branches:
  only:
    - master

dist: trusty

addons_shortcuts:
  addons_clang38: &clang38
    apt:
      sources: [ 'llvm-toolchain-trusty-3.8' ]
      packages: [ 'clang-3.8', 'libc++-dev', 'xorg-dev', 'libglu1-mesa-dev' ]
  addons_clang39: &clang39
    apt:
      sources: [ 'llvm-toolchain-trusty-3.9' ]
      packages: [ 'clang-3.9', 'libc++-dev', 'xorg-dev', 'libglu1-mesa-dev' ]
  addons_clang35: &clang40
    apt:
      sources: [ 'llvm-toolchain-trusty-4.0' ]
      packages: [ 'clang-4.0', 'libc++-dev', 'xorg-dev', 'libglu1-mesa-dev' ]
  addons_gcc49: &gcc49
    apt:
      sources: [ 'ubuntu-toolchain-r-test' ]
      packages: [ 'gcc-4.9', 'g++-4.9', 'xorg-dev', 'libglu1-mesa-dev' ]
  addons_gcc5: &gcc5
    apt:
      sources: [ 'ubuntu-toolchain-r-test' ]
      packages: [ 'gcc-5', 'g++-5', 'xorg-dev', 'libglu1-mesa-dev' ]
  addons_gcc6: &gcc6
    apt:
      sources: [ 'ubuntu-toolchain-r-test' ]
      packages: [ 'gcc-6', 'g++-6', 'doxygen', 'xorg-dev', 'libglu1-mesa-dev' ]

cache:
  directories:
    - ${TRAVIS_BUILD_DIR}/deps/vulkan
    - /usr/local/cuda-7.5
    - /usr/local/cuda-8.0

env:
  global:
    - VULKAN_VERSION=1.0.46.0

matrix:
  include:

    # # Xcode 7.3
    # - os: osx
    #   env: SHARED=OFF TESTS=ON
    #   osx_image: xcode7.3

    # # Xcode 8
    # - os: osx
    #   env: SHARED=OFF TESTS=ON
    #   osx_image: xcode8

    # GCC 5
    - os: linux
      env: SHARED=OFF TESTS=ON GCC=5
      compiler: "g++-5"
      addons: *gcc5

    # # GCC 6
    # - os: linux
    #   env: SHARED=OFF TESTS=ON GCC=6
    #   compiler: "g++-6"
    #   addons: *gcc6

    # # clang 3.8
    # - os: linux
    #   env: LLVM=3.8 SHARED=OFF TESTS=ON
    #   compiler: "clang-3.8"
    #   addons: *clang38

    # # clang 3.9
    # - os: linux
    #   env: LLVM=3.9 SHARED=OFF TESTS=ON
    #   compiler: "clang-3.9"
    #   addons: *clang39

    # # Shared libs
    # - os: osx
    #   env: SHARED=ON TESTS=ON
    #   osx_image: xcode8

    # - os: linux
    #   env: LLVM=default SHARED=ON TESTS=ON
    #   compiler: "clang-3.9"
    #   addons: *clang39

    # # Debug
    # - os: osx
    #   env: BUILD_TYPE=Debug SHARED=OFF TESTS=ON
    #   osx_image: xcode8

    # - os: linux
    #   env: LLVM=default BUILD_TYPE=Debug SHARED=OFF TESTS=ON
    #   compiler: "clang-3.9"
    #   addons: *clang39


before_install:
  - |
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      brew update
    fi

  ############################################################################
  # Set build type to default Release value
  ############################################################################
  - if [[ "${BUILD_TYPE}" == "" ]]; then BUILD_TYPE=Release; fi

  ############################################################################
  # Setup default versions and override compiler if needed
  ############################################################################
  - if [[ "${LLVM}" == "default" ]]; then LLVM=3.9; fi
  - |
    if [[ "${LLVM}" != "" ]]; then
      export CXX=clang++-${LLVM}
      export CXXFLAGS=-stdlib=libc++
    fi
  - |
    if [[ "${GCC}" != "" ]]; then
      export CXX=g++-${GCC}
    fi
  - ${CXX} --version


install:
  ############################################################################
  # All compiled dependencies are installed in ${TRAVIS_BUILD_DIR}/deps/
  ############################################################################
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}

  ############################################################################
  # Install a recent CMake
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="https://cmake.org/files/v3.7/cmake-3.7.2-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    else
      brew upgrade cmake || brew install cmake
    fi
  - cmake --version

  ############################################################################
  # Install Vulkan
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      VULKAN_DIR=${TRAVIS_BUILD_DIR}/deps/vulkan
      if [[ -z "$(ls -A ${VULKAN_DIR})" ]]; then
        VULKAN_URL="https://vulkan.lunarg.com/sdk/download/${VULKAN_VERSION}/linux/vulkansdk-linux-x86_64-${VULKAN_VERSION}.run"
        mkdir -p ${VULKAN_DIR}
        cd ${VULKAN_DIR}
        travis_retry wget ${VULKAN_URL}
        bash vulkansdk-linux-x86_64-${VULKAN_VERSION}.run ${VULKAN_DIR}/
      fi;
      cd ${VULKAN_DIR}/VulkanSDK/${VULKAN_VERSION}
      source setup-env.sh
      VULKAN=ON
      OPENGL=OFF
    else
      OPENGL=ON
      VULKAN=OFF
    fi

  ############################################################################
  # Install CUDA
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" && "${CUDA}" != "" ]]; then
      travis_retry wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1404/x86_64/cuda-repo-ubuntu1404_${CUDA}_amd64.deb
      travis_retry sudo dpkg -i cuda-repo-ubuntu1404_${CUDA}_amd64.deb
      travis_retry sudo apt-get update -qq
      export CUDA_APT=${CUDA:0:3}
      export CUDA_APT=${CUDA_APT/./-}
      travis_retry sudo apt-get install -y cuda-drivers cuda-core-${CUDA_APT} cuda-cudart-dev-${CUDA_APT} cuda-cufft-dev-${CUDA_APT}
      travis_retry sudo apt-get clean
      export CUDA_HOME=/usr/local/cuda-${CUDA:0:3}
      export LD_LIBRARY_PATH=${CUDA_HOME}/nvvm/lib64:${LD_LIBRARY_PATH}
      export LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH}
      export PATH=${CUDA_HOME}/bin:${PATH}
    fi
  - if [[ "${TRAVIS_OS_NAME}" == "linux" && "${CUDA}" != "" ]]; then nvcc --version; fi;

before_script:
  - cd ${TRAVIS_BUILD_DIR}

script:
  ############################################################################
  # Build main simulation library and tests
  ############################################################################
  - mkdir build
  - cd build
  - |
    cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DBUILD_SHARED_LIBS=$SHARED    \
          -DBUILD_SHARED_TESTS=$TESTS    \
          -DUSE_VULKAN=$VULKAN           \
          -DUSE_OPENGL=$OPENGL           \
          -DUSE_GLFW=ON                  \
          -DUSE_GLM=ON                   \
          -DUSE_GUI=ON                   \
          -DSTRICT_FLAGS=ON              \
          ..
  - cmake --build . -- -j12

  ############################################################################
  # Build example projects using simulation library
  ############################################################################
  - cd ../examples
  - mkdir build
  - cd build
  - cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_SHARED_LIBS=$SHARED ..
  - cmake --build . -- -j12

notifications:
  on_success: never
  on_failure: always
