// CubeWorld.hpp
#pragma once

#include "shared/core/World.hpp"
#include <memory>
#include <deque>


namespace example
{

class RotatingCube;

typedef std::deque< std::unique_ptr< RotatingCube > > CubeVec;


/////////////////////////////////////////////
/// \brief The CubeWorld class
///
/// \author Logan Barnes
/////////////////////////////////////////////
class CubeWorld : public shs::World
{

public:

  ///////////////////////////////////////////////////////////////
  /// \brief CubeWorld
  ///////////////////////////////////////////////////////////////
  CubeWorld( );


  ///////////////////////////////////////////////////////////////
  /// \brief ~CubeWorld
  ///////////////////////////////////////////////////////////////
  virtual
  ~CubeWorld( );


  ///////////////////////////////////////////////////////////////
  /// \brief update
  ///////////////////////////////////////////////////////////////
  virtual
  void update (
               const double worldTime, ///< update to this time
               const double timestep   ///< interval since last update
               ) final;


  void addRandomCube ( );

  void removeOldestCube ( );

  ///////////////////////////////////////////////////////////////
  /// \brief getCube
  /// \return
  ///////////////////////////////////////////////////////////////
  const CubeVec&
  getCubes( ) const { return cubes_; }


private:

  unsigned currentId_;
  CubeVec cubes_;

};


} // end namespace example
