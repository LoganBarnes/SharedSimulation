// CubeWorld.hpp
#pragma once


#include "world/World.hpp"
#include <memory>


namespace simple
{

// class Cube;


/////////////////////////////////////////////
/// \brief The CubeWorld class
///
/// \author Logan Barnes
/////////////////////////////////////////////
class CubeWorld : public shared::World
{

public:

  ///////////////////////////////////////////////////////////////
  /// \brief CubeWorld
  ///////////////////////////////////////////////////////////////
  CubeWorld( );


  ///////////////////////////////////////////////////////////////
  /// \brief ~CubeWorld
  ///////////////////////////////////////////////////////////////
  virtual
  ~CubeWorld( ) = default;


  ///////////////////////////////////////////////////////////////
  /// \brief update
  ///////////////////////////////////////////////////////////////
  virtual
  void update (
               const double worldTime, ///< update to this time
               const double timestep   ///< interval since last update
               ) final;

  ///////////////////////////////////////////////////////////////
  /// \brief getCube
  /// \return
  ///////////////////////////////////////////////////////////////
  // Cube &getCube() const { return *upCube_; }

private:

  // std::unique_ptr< Cube > upCube_;

};


} // end namespace simple

